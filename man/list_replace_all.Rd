% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list_replace_all.R
\name{list_replace_all}
\alias{list_replace_all}
\title{Replace matches in a list}
\usage{
list_replace_all(list, pattern = "^$", replacement = NULL)
}
\arguments{
\item{list}{A \code{\link[base:list]{list}} or \code{\link[base:list]{pairlist}} object.}

\item{pattern}{A \code{\link[base:character]{character}} string containing a regular
expression to be matched in the list.}

\item{replacement}{An \code{\link[base:is.recursive]{atomic}} value to replace the
matches with.}
}
\value{
A \code{\link[base:list]{list}} with matches replaced with the replacement
value.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\code{list_replace_all()} replaces matches in \code{\link[base:is.recursive]{atomic}} vectors
inside a list with a replacement value. If the list is nested, the function
will recursively apply the replacement to all nested lists.
}
\details{
If there is a match, but the replacement value is not the same class as the
original value, the function will return the replacement value as is.

If the replacement value is the same class as the original value, the
function will return a vector with the replacement value in the same
position as the match.
}
\examples{
list_replace_all(list(a = "", b = "b", c = list(d = "", e = "e")))
#> $a # Expected
#> NULL
#>
#> $b
#> [1] "b"
#>
#> $c
#> $c$d
#> NULL
#>
#> $c$e
#> [1] "e"
}
\concept{list functions.}
